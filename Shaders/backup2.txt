#include "Collision.h"

Collision::Collision()
{
}

Collision::~Collision()
{
}

//temp line calculatin for object (hitbox)
GLfloat obj_x1, obj_x2, obj_y1, obj_y2, obj_c, obj_m;
GLfloat proj_x1, proj_x2, proj_y1, proj_y2, proj_m, proj_c;
GLfloat simul_x1, simul_y1, simul_c, simul_m, temp_simul_x1, temp_simul_y1;
//glm::vec4 collisionSets[] = { glm::vec4(1, 10, 0, 9), glm::vec4(7, 10, 9, 6), glm::vec4(7, 4, 6, 3), glm::vec4(1, 4, 0, 3) };
GLint collisionSets[] = { 1, 10, 0, 9, 7, 10, 6, 9, 7, 4, 6, 3, 1, 4, 0, 3 };
GLfloat diff_x[8], diff_y[8], simul_x[4], simul_y[4];


glm::mat2 Collision::DetectCollision(glm::vec3 objectVertTopRight, glm::vec3 objectVertTopLeft, glm::vec3 objectVertBottomLeft, glm::vec3 objectVertBottomRight, GLfloat rotateObjectAngle, glm::vec3 planePosition, glm::vec3 tempPosition, GLfloat rotatePlaneAngle)
{
	//glm::vec3 topRight, topLeft, bottomRight, bottomLeft;
	GLfloat verticesPositions[12]; //top right, bottom right, bottom left, top left

	//////////////////////////OBJECT VERTICES POSITIONS
	verticesPositions[0] = (objectVertTopRight[0] * cos(rotateObjectAngle) - objectVertTopRight[1] * sin(rotateObjectAngle)) + planePosition[0];
	verticesPositions[1] = (objectVertTopRight[1] * cos(rotateObjectAngle) + objectVertTopRight[0] * sin(rotateObjectAngle)) + planePosition[1];
	verticesPositions[2] = 0.0f;

	verticesPositions[3] = (objectVertBottomRight[0] * cos(rotateObjectAngle) - objectVertBottomRight[1] * sin(rotateObjectAngle)) + planePosition[0];
	verticesPositions[4] = (objectVertBottomRight[1] * cos(rotateObjectAngle) + objectVertBottomRight[0] * sin(rotateObjectAngle)) + planePosition[1];
	verticesPositions[5] = 0.0f;

	verticesPositions[6] = (objectVertBottomLeft[0] * cos(rotateObjectAngle) - objectVertBottomLeft[1] * sin(rotateObjectAngle)) + planePosition[0];
	verticesPositions[7] = (objectVertBottomLeft[1] * cos(rotateObjectAngle) + objectVertBottomLeft[0] * sin(rotateObjectAngle)) + planePosition[1];
	verticesPositions[8] = 0.0f;

	verticesPositions[9] = (objectVertTopLeft[0] * cos(rotateObjectAngle) - objectVertTopLeft[1] * sin(rotateObjectAngle)) + planePosition[0];
	verticesPositions[10] = (objectVertTopLeft[1] * cos(rotateObjectAngle) + objectVertTopLeft[0] * sin(rotateObjectAngle)) + planePosition[1];
	verticesPositions[11] = 0.0f;


	GLfloat tempCalcPosX_a[4], tempCalcPosY_a[4];
	GLfloat tempCalcPosX, tempCalcPosY;
	GLfloat diff_x1 = 0.0f, diff_y1 = 0.0f, diff_x2 = 0.0f, diff_y2 = 0.0f;

	for (int i = 0; i < 4; i++)
	{
		///NEED TO MODIFY FOR ALL SIDES
		obj_y2 = verticesPositions[collisionSets[4*i]];
		obj_y1 = verticesPositions[collisionSets[4*i + 1]];
		obj_x2 = verticesPositions[collisionSets[4*i + 2]];
		obj_x1 = verticesPositions[collisionSets[4*i + 3]];

		//std::cout << bottomLeft[0][0] << "    " << topLeft[0][0] << "\n";

		//m val
		obj_m = (obj_y1 - obj_y2) / (obj_x1 - obj_x2);
		obj_c = obj_y1 - (obj_x1 * obj_m);


		//cubePositions[8][0] = 0.0f;
		//cubePositions[8][1] = 1.0f;

		tempCalcPosX_a[i] = (planePosition[0] * cos(rotatePlaneAngle) - (planePosition[1]) * sin(rotatePlaneAngle)) + tempPosition[0];
		//std::cout << "\ntempposition[0]  " << tempPosition[0] << "\n";
		tempCalcPosY_a[i] = ((planePosition[1]) * cos(rotatePlaneAngle) + planePosition[0] * sin(rotatePlaneAngle)) + tempPosition[1];


		//proj_y1 = projectilePos[0][1];
		proj_y1 = tempCalcPosY_a[i];
		proj_y2 = tempPosition[1];
		//proj_x1 = projectilePos[0][0];
		proj_x1 = tempCalcPosX_a[i];
		proj_x2 = tempPosition[0];

		proj_m = (proj_y1 - proj_y2) / (proj_x1 - proj_x2);
		proj_c = proj_y1 - (proj_x1 * proj_m);

		simul_x[i] = -(proj_c - obj_c) / (proj_m - obj_m);
		simul_y[i] = (((obj_m + proj_m) * simul_x1 + (obj_c + proj_c))) / 2;

		//cubePositions[6][0] = bottomLeft[0];
		//cubePositions[6][1] = bottomLeft[1];

		//std::cout << simul_x1 << " " << simul_y1 << "\n";
		//std::cout << "(proj-obj)m: " << proj_m << " " << obj_m << " (proj-obj)c: " << proj_c << " " << obj_c << "\n";
		//std::cout << "proj_y1: " << proj_y1 << " proj_x1 * obj_m: " << proj_x1 * obj_m << "\n";

		//if (rotateObjectAngle >= 0.0f && rotateObjectAngle <= 1.57f)
		//{

		GLfloat littleY, littleX;
		/*
		if (rotateObjectAngle < 1.57f)
		{
		if (obj_y2 <= obj_y1)
		{
		littleY = obj_y2;
		}
		else
		{
		littleY = obj_y1;
		}

		if (obj_x2 <= obj_x1)
		{
		littleX = obj_x2;
		}
		else
		{
		littleX = obj_x1;
		}
		}
		else if (rotateObjectAngle > 1.57f && rotateObjectAngle < 3.14f)
		{
		if (obj_y2 <= obj_y1)
		{
		littleY = obj_y2;
		}
		else
		{
		littleY = obj_y1;
		}

		if (obj_x2 <= obj_x1)
		{
		littleX = obj_x2;
		}
		else
		{
		littleX = obj_x1;
		}
		}
		else
		{
		if (obj_y2 <= obj_y1)
		{
		littleY = obj_y2;
		}
		else
		{
		littleY = obj_y1;
		}

		if (obj_x2 <= obj_x1)
		{
		littleX = obj_x2;
		}
		else
		{
		littleX = obj_x1;
		}

		*/

		//cubePositions[8][0] = tempCalcPosX;
		//cubePositions[8][1] = tempCalcPosY;

		//if (cubePositions[0][0] >= littleX && cubePositions[0][1] >= littleY)
		//{

		if (obj_x2 > obj_x1)
		{
			GLfloat sortTempVar = 0.0f;
			sortTempVar = obj_x1;
			obj_x1 = obj_x2;
			obj_x2 = sortTempVar;
		}


		if (simul_x[i] <= obj_x1 && simul_x[i] >= obj_x2)// && simul_y1 <= obj_y1 && simul_y1 >= obj_y2 )
		{

			//cubePositions[6][0] = simul_x1;
			//cubePositions[6][1] = simul_y1;
			//std::cout << "CALLED";
		}
		else
		{
			simul_x[i] = 1.0f;
			simul_y[i] = 1.0f;
		}
		
		diff_x[i] = simul_x[i] - planePosition[0];
		diff_y[i] = simul_y[i] - planePosition[1];

		//if (diff_x1 <= 0.0f)
		//	diff_x1 *= -1;

		//if (diff_y1 <= 0.0f)
		//	diff_y1 *= -1;

		if (i != 0)
		{
			if (diff_x[i] <= diff_x[i - 1] && diff_y[i] <= diff_y[i - 1])
			{
				temp_simul_x1 = simul_x[i];
				temp_simul_y1 = simul_y[i];
				tempCalcPosX = tempCalcPosX_a[i];
				tempCalcPosY = tempCalcPosY_a[i];
			}
		}
		else if (i == 0)
		{
			temp_simul_x1 = simul_x[i];
			temp_simul_y1 = simul_y[i];
			tempCalcPosX = tempCalcPosX_a[i];
			tempCalcPosY = tempCalcPosY_a[i];
		}

		

		//}

		//rotateObjectAngle = 1.0f;

		//objectVertices[3] = 1.0f + rotatePlaneAngle;
		//objectVertices[4] = 1.0f + rotatePlaneAngle;
		//objectVertices[5] = 1.0f + rotatePlaneAngle;
		//topleft



		//}
		//if (rotateObjectAngle >= 1.57f && rotateObjectAngle <= 3.14f)
		//{
		//if (simul_x1 <= obj_x1 && simul_x1 <= obj_x2)// && simul_y1 <= obj_y1 && simul_y1 >= obj_y2 )
		//{
		//	cubePositions[6][0] = simul_x1;
		//	cubePositions[6][1] = simul_y1;
		//}
		//else
		//{
		//	cubePositions[6][0] = 1.0f;
		//	cubePositions[6][1] = 1.0f;
		//}
		//}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/*
		// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions
		glfwPollEvents();
		do_movement();
		// Set the required callback functions
		glfwSetKeyCallback(window, key_callback);
		*/

		//glfwSetCursorPosCallback(window, mouse_callback);
		//glfwSetScrollCallback(window, scroll_callback);

		/* LIGHTING EXPERIMENT
		for (int i = 0; i < 6; i++)
		{
		if ((cubePositions[1][1] <= (objectPositions[0][1] + objectVertices[1 + 8 * i]  + 5.0f)) && (cubePositions[1][1] >= (objectPositions[0][1] + objectVertices[1 + 8 * i])))
		{
		objectVertices[3 + 8 * i] = 0.5f;
		objectVertices[4 + 8 * i] = 0.5f;
		objectVertices[5 + 8 * i] = 0.5f;
		std::cout << "CALLED\n";
		}
		else if ((cubePositions[1][1] <= (objectPositions[0][1] + objectVertices[1 + 8 * i])))
		{
		objectVertices[3 + 8 * i] -= 0.05f;
		objectVertices[4 + 8 * i] -= 0.05f;
		objectVertices[5 + 8 * i] -= 0.05f;
		}
		}
		*/

		//std::cout << "CubePos[1][1]: " << cubePositions[1][1] << "\n";
		//std::cout << "ObjPos[0][1] + other: " << objectPositions[0][1] + objectVertices[1] << "\n";
		//std::cout << "ObjPos[0][1] + other: " << objectPositions[0][1] + objectVertices[1] + 3.0f << "\n";

		//std::cout << "cubepos[0][1]" << cubePositions[0][1] << "\n";
		//std::cout << "objvert[13]" << objectVertices[13] << "\n";

		//std::cout << "simul x: " << simul_x1 << "  " << "simul y: " << simul_y1 << " \n";


		//std::cout << "y = " << obj_m << "x + " << obj_c << "   ,   y = " << proj_m << "x + " << proj_c << "\n" << "tempcalcposy: " << tempCalcPosY << " tempcalcposx: " << tempCalcPosX << "\n" << "simul x: " << simul_x1 << " simul y: " << simul_y1 << "\n";
	}

	std::cout << tempCalcPosX << "\n";
	std::cout << tempCalcPosY << "\n";
	std::cout << temp_simul_x1 << "\n";
	std::cout << temp_simul_y1 << "\n\n";

	return glm::mat2(tempCalcPosX, tempCalcPosY, temp_simul_x1, temp_simul_y1);
}